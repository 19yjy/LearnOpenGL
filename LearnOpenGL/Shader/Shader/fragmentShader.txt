#version 330 core

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	sampler2D selfLight;
	vec3 ambient;
	float shininess;
};
uniform Material material;

//Light
struct DirLight {
	vec3 direction;

	vec3 color;
};
uniform DirLight dirLight;


struct PointLight {
	vec3 position;

	float constant;
	float linear;
	float quadratic;

	vec3 color;
};
#define NR_POINT_LIGHTS 4
uniform PointLight pointLights[NR_POINT_LIGHTS];

out vec4 FragColor;

in vec3 Normal;
in vec3 ourColor;
in vec2 TexCoord;
in vec3 FragPos;
in vec4 FragPosLightSpace;

uniform float num;
uniform vec3 LightColor;
uniform vec3 ObjectColor;
uniform vec3 LightPos;
uniform vec3 viewPos;
uniform sampler2D depthMap;

//function
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir) {
	vec3 LightColor = light.color;
	vec3 norm = normalize(Normal);
	vec3 LightDir = normalize(-light.direction);

	float Ka = 0.1f, Kd = 1, Ks = 1;
	vec3 ambient = Ka * material.ambient * vec3(texture(material.diffuse, TexCoord));

	float diff = max(dot(norm, LightDir), 0.0);
	vec3 diffuse = Kd * vec3(texture(material.diffuse, TexCoord)) * diff * LightColor;

	vec3 Half = normalize(viewDir + LightDir);
	float spec = 0.0;
	if (dot(norm, viewDir) >= 0.0)spec = pow(max(0.0, dot(Half, norm)), material.shininess);
	vec3 specular = Ks * vec3(texture(material.specular, TexCoord)) * spec * LightColor;

	vec3 SelfLight = vec3(texture(material.selfLight, TexCoord));

	vec3 result = (SelfLight + ambient + diffuse + specular);

	return result;
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {
	vec3 norm = normalize(Normal);
	vec3 LightDir = normalize(light.position - FragPos);
	float dis = length(light.position - fragPos);
	float attenuation = light.constant + light.linear * dis + light.quadratic * dis * dis;

	float Ka = 0.1f, Kd = 1, Ks = 1;
	vec3 ambient = Ka * material.ambient * vec3(texture(material.diffuse, TexCoord));

	float diff = max(dot(norm, LightDir), 0);
	vec3 diffuse = attenuation * Kd * vec3(texture(material.diffuse, TexCoord)) * diff * LightColor;

	vec3 Half = normalize(viewDir + LightDir);
	float spec = 0;
	if (dot(norm, viewDir) >= 0)spec = pow(max(0, dot(Half, norm)), material.shininess);
	vec3 specular = attenuation * Ks * vec3(texture(material.specular, TexCoord)) * spec * LightColor;

	vec3 SelfLight = vec3(texture(material.selfLight, TexCoord));

	vec3 result = (SelfLight + ambient + diffuse + specular);

	return result;
}

float shadowCalculation(vec4 PosLightSpace) {
	vec3 projectcoords = PosLightSpace.xyz / PosLightSpace.w;
	projectcoords = projectcoords * 0.5 + 0.5;
	float closestDepth = texture(depthMap, projectcoords.xy).r;
	return closestDepth;
	float bias=0.001;
	if (closestDepth < projectcoords.z-bias) {
		return 1.0;
	}
	return 0.0;
}
void main()
{
	//FragColor = vec4(vec3(texture(depthMap, TexCoord).r), 1.0);

	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);
	/*float Ka = 0.1f, Kd = 1, Ks = 1;
	vec3 ambient = Ka * material.ambient * vec3(texture(material.diffuse, TexCoord));
	vec3 LightDir=dirLight.direction;
	float diff = max(dot(norm, LightDir),0.0);
	vec3 diffuse = Kd * vec3(texture(material.diffuse, TexCoord)) * diff * LightColor;

	vec3 Half = normalize(viewDir + LightDir);
	float spec = 0;
	if (dot(norm, viewDir) >= 0)spec = pow(max(0, dot(Half, norm)), material.shininess);
	vec3 specular = Ks * vec3(texture(material.specular, TexCoord)) * spec * LightColor;

	vec3 SelfLight = vec3(texture(material.selfLight, TexCoord));

	vec3 result = (SelfLight + ambient + diffuse + specular);
*/
	vec3 result = vec3(0.0, 0.0, 0.0);
	//result += CalcDirLight(dirLight, norm, viewDir);
	for (int i = 0;i < 4;i++) {
		result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);
	}
	FragColor = vec4(result, 1.0);
	//float visbility = shadowCalculation(FragPosLightSpace);
	//vec4 Texture = texture(material.diffuse, TexCoord);
	//FragColor=vec4(vec3(visbility),1.0);
	//FragColor =vec4((1.0-visbility)* Texture.xyz,1.0);
}