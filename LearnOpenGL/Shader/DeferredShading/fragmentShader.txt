#version 330 core
out vec4 FragColor;
in vec2 TexCoords;
// material parameters
uniform sampler2D albedoMap;
uniform sampler2D normalMap;
uniform sampler2D gPos;
uniform sampler2D roughnessMap;
uniform samplerCube prefilterMap;
uniform samplerCube irradianceMap;
uniform sampler2D   brdfLUT; 
uniform sampler2D   shadowMap;

vec3 LightWorldPos;
vec3 WorldPos;
vec3 N;
// lights
uniform vec3 lightPositions[4];
uniform vec3 lightColors[4];
uniform mat4 Lpv;
uniform mat4 vWorldToScreen;
uniform vec3 camPos;

const float PI = 3.14159265359;
// ----------------------------------------------------------------------------
float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
// ----------------------------------------------------------------------------
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}
// ----------------------------------------------------------------------------
vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(normalMap, TexCoords).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(WorldPos);
    vec3 Q2  = dFdy(WorldPos);
    vec2 st1 = dFdx(TexCoords);
    vec2 st2 = dFdy(TexCoords);

    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}
// ----------------------------------------------------------------------------
vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}   
// ----------------------------------------------------------------------------
float shadowCalculation(vec4 PosLightSpace) {
	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
	vec3 projectcoords = PosLightSpace.xyz;
	projectcoords = projectcoords * 0.5 + 0.5;
	float bias=max(0.003 * (1.0 - dot(N, lightPositions[0]-WorldPos)), 0.0008);
	for(int i=-1;i<=1;i++){
		for(int j=-1;j<=1;j++){
			float closestDepth = texture(shadowMap, projectcoords.xy+texelSize*vec2(i,j)).r;
			if (closestDepth < projectcoords.z-bias) {
				shadow+= 1.0;
			}		
		}
	}
	return shadow/9.0;
}
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------

vec2 GetScreenCoordinate(vec3 posWorld) {
  vec4 tmp=vWorldToScreen * vec4(posWorld, 1.0);

  vec2 uv = (tmp.xy/tmp.w) * 0.5 + 0.5;
  return uv;
}
// ----------------------------------------------------------------------------
vec3 calcuSSR(){
	vec3 result=vec3(0.0f);
	vec3 ray=camPos-WorldPos;
	vec3 reflectDir=normalize(reflect(-ray,N));
	float offset=1;
	float step=100;	
    vec3 nowPos;
	for(int i=1;i<=step;i++){
		nowPos=WorldPos+i*offset*reflectDir;
		vec2 uv=GetScreenCoordinate(nowPos);
        if(uv.x>1||uv.x<0||uv.y<0||uv.y>1)break;
		float nowDepth=nowPos.z;
		float screenDepth=texture2D(gPos, uv).z;
		if(nowDepth<screenDepth-0.1){
			result=texture2D(albedoMap,uv).rgb;
			break;
		}
	}
	return result;
} 
// ----------------------------------------------------------------
// ----------------------------------------------------------------------------
void main()
{		
	WorldPos   = texture(gPos,TexCoords).xyz;
    vec3 albedo     = pow(texture(albedoMap, TexCoords).rgb, vec3(2.2));
    float metallic  = texture(roughnessMap, TexCoords).g;
    float roughness = texture(roughnessMap, TexCoords).r;
    N = normalize(texture(normalMap,TexCoords).xyz);
    vec3 V = normalize(camPos - WorldPos);
	//LightWorldPos=texture(gLightPos,TexCoords).xyz;
	LightWorldPos=vec3(Lpv*vec4(WorldPos,1.0)); 
    // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
    // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
    vec3 F0 = vec3(0.04); 
    FragColor = vec4(calcuSSR(), 1.0);
    F0 = mix(F0, albedo, metallic);
    float visbility=1.0-shadowCalculation(vec4(LightWorldPos,1.0))  ;
    // reflectance equation
    vec3 Lo = vec3(0.0);
    for(int i = 0; i <1; ++i) 
    {
        // calculate per-light radiance
        vec3 L = normalize(lightPositions[i] - WorldPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;

        // Cook-Torrance BRDF
        float NDF = DistributionGGX(N, H, roughness);   
        float G   = GeometrySmith(N, V, L, roughness);      
        vec3 F    = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
           
        vec3 numerator    = NDF * G * F; 
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
        vec3 specular = numerator / denominator;
        
        // kS is equal to Fresnel
        vec3 kS = F;
        // for energy conservation, the diffuse and specular light can't
        // be above 1.0 (unless the surface emits light); to preserve this
        // relationship the diffuse component (kD) should equal 1.0 - kS.
        vec3 kD = vec3(1.0) - kS;
        // multiply kD by the inverse metalness such that only non-metals 
        // have diffuse lighting, or a linear blend if partly metal (pure metals
        // have no diffuse light).
        kD *= 1.0 - metallic;	  

        // scale light by NdotL
        float NdotL = max(dot(N, L), 0.0);      
        // add to outgoing radiance Lo
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
   			
    }   
    
    // ambient lighting (note that the next IBL tutorial will replace 
    // this ambient lighting with environment lighting).
    vec3 kS = fresnelSchlick(max(dot(N, V), 0.0), F0);
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;
	vec3 enirradiance=texture(irradianceMap,N).rgb;
    vec3 ambient = kD * albedo*enirradiance ;

    vec3 color = ambient +visbility* Lo;
    //reflect envirment
    vec3 R = reflect(-V, N);   

    const float MAX_REFLECTION_LOD = 4.0;
    vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;    
	vec3 F        = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);
	vec2 envBRDF  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;
	vec3 specular = prefilteredColor * (F * envBRDF.x + envBRDF.y);
	color = color + specular;
    // HDR tonemapping
    color = color / (color + vec3(1.0));
    // gamma correct
    color = pow(color, vec3(1.0/2.2)); 
		//shadow
}